name: Build luci-app-xray for GL-MT6000 (Filogic)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

env:
  SDK_URL: https://downloads.immortalwrt.org/snapshots/targets/mediatek/filogic/immortalwrt-sdk-mediatek-filogic_gcc-14.3.0_musl.Linux-x86_64.tar.zst
  FEEDS_CONF: |
    src-git packages https://git.openwrt.org/feed/packages.git
    src-git luci https://git.openwrt.org/project/luci.git
    src-git routing https://git.openwrt.org/feed/routing.git
    src-git telephony https://git.openwrt.org/feed/telephony.git

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout this repository
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zstd build-essential libncurses5-dev libncursesw5-dev \
        zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3 file

    - name: Download and extract ImmortalWrt SDK
      run: |
        wget ${{ env.SDK_URL }} -O immortalwrt-sdk.tar.zst
        tar -I zstd -xf immortalwrt-sdk.tar.zst --strip-components=1
        rm immortalwrt-sdk.tar.zst
        echo "SDK contents:"
        ls -la

    - name: Setup feeds configuration
      run: echo "${{ env.FEEDS_CONF }}" > feeds.conf

    - name: Update and install feeds
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install libopenssl libustream-openssl ca-bundle

    - name: Clone luci-app-xray source
      run: |
        rm -rf package/luci-app-xray
        git clone https://github.com/yichya/luci-app-xray.git package/luci-app-xray
        echo "luci-app-xray package structure:"
        ls -la package/luci-app-xray/

    - name: Check package Makefile
      run: |
        if [ -f "package/luci-app-xray/Makefile" ]; then
          echo "Makefile exists, checking content:"
          head -20 package/luci-app-xray/Makefile
        else
          echo "ERROR: Makefile does not exist!"
          exit 1
        fi

    - name: Prepare build configuration
      run: |
        # 创建必要的目录结构
        mkdir -p bin/packages/aarch64_cortex-a53/base
        mkdir -p bin/packages/aarch64_cortex-a53/luci
        mkdir -p bin/packages/aarch64_cortex-a53/packages
        
        # 设置基本配置
        echo "CONFIG_PACKAGE_luci-app-xray=y" > .config
        make defconfig

    - name: Compile luci-app-xray package
      run: |
        # 尝试编译，设置超时为45分钟
        timeout 45m make package/luci-app-xray/compile -j$(nproc) V=s 2>&1 | tee build.log
        
        # 检查编译结果
        if [ $? -eq 124 ]; then
          echo "Build timed out, trying single-threaded approach..."
          make package/luci-app-xray/compile -j1 V=s 2>&1 | tee -a build.log
        fi

    - name: Check build results
      run: |
        echo "Checking build results..."
        # 查找所有可能的IPK文件位置
        find . -name "*.ipk" -type f | head -20 || echo "No IPK files found"
        
        # 特别检查标准输出目录
        if [ -d "bin/packages" ]; then
          echo "Contents of bin/packages:"
          find bin/packages/ -name "*.ipk" -type f | head -20 || echo "No IPK files in bin/packages"
        else
          echo "bin/packages directory does not exist"
        fi
        
        # 检查编译日志中的错误
        if [ -f "build.log" ]; then
          echo "Last 50 lines of build log:"
          tail -50 build.log
          
          echo "Checking for errors in build log:"
          grep -i "error\|fail\|warning" build.log | tail -20
        fi

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          build.log
          **/*.ipk
        retention-days: 7

    - name: Upload SDK contents for debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sdk-contents
        path: |
          .
        retention-days: 1
