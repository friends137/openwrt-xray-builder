name: Build luci-app-xray for GL-MT6000 (Filogic)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

env:
  SDK_URL: https://downloads.immortalwrt.org/snapshots/targets/mediatek/filogic/immortalwrt-sdk-mediatek-filogic_gcc-14.3.0_musl.Linux-x86_64.tar.zst
  FEEDS_CONF: |
    src-git packages https://git.openwrt.org/feed/packages.git
    src-git luci https://git.openwrt.org/project/luci.git
    src-git routing https://git.openwrt.org/feed/routing.git
    src-git telephony https://git.openwrt.org/feed/telephony.git

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout this repository
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zstd build-essential libncurses5-dev libncursesw5-dev \
        zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3

    - name: Download and extract ImmortalWrt SDK
      run: |
        wget ${{ env.SDK_URL }} -O immortalwrt-sdk.tar.zst
        tar -I zstd -xf immortalwrt-sdk.tar.zst --strip-components=1
        rm immortalwrt-sdk.tar.zst
        echo "SDK structure:"
        ls -la

    - name: Setup feeds configuration
      run: echo "${{ env.FEEDS_CONF }}" > feeds.conf

    - name: Update and install feeds
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Check available packages
      run: |
        echo "Available packages in feeds:"
        ./scripts/feeds list | grep -i xray || echo "No xray packages found"
        ./scripts/feeds list | grep -i luci-app-xray || echo "No luci-app-xray found"

    - name: Try to install luci-app-xray from feeds
      run: |
        # 尝试从feeds安装luci-app-xray
        if ./scripts/feeds list | grep -q "luci-app-xray"; then
          echo "Installing luci-app-xray from feeds..."
          ./scripts/feeds install luci-app-xray
        else
          echo "luci-app-xray not available in feeds, cloning from GitHub..."
          rm -rf package/luci-app-xray
          git clone https://github.com/yichya/luci-app-xray.git package/luci-app-xray
        fi

    - name: Verify package structure
      run: |
        echo "Package structure:"
        find package/luci-app-xray -type f -name "Makefile" -o -name "*.mk" | head -10
        if [ -f "package/luci-app-xray/Makefile" ]; then
          echo "Main Makefile content (first 20 lines):"
          head -20 package/luci-app-xray/Makefile
        fi

    - name: Prepare build configuration
      run: |
        # 创建必要的目录结构
        mkdir -p bin/packages/aarch64_cortex-a53/base
        mkdir -p bin/packages/aarch64_cortex-a53/luci
        mkdir -p bin/packages/aarch64_cortex-a53/packages
        
        # 设置基本配置
        echo "CONFIG_PACKAGE_luci-app-xray=y" > .config
        make defconfig

    - name: Try alternative compilation approaches
      run: |
        echo "Trying different compilation approaches..."
        
        # 方法1: 直接编译
        echo "=== Approach 1: Direct compilation ==="
        make package/luci-app-xray/compile V=s 2>&1 | head -c 100000 | tee -a build.log
        
        # 检查是否生成了IPK
        if find . -name "*.ipk" | grep -q .; then
          echo "IPK files found with approach 1!"
          exit 0
        fi
        
        # 方法2: 先编译依赖
        echo "=== Approach 2: Build dependencies first ==="
        make package/luci-app-xray/prepare V=s 2>&1 | head -c 50000 | tee -a build.log
        make package/luci-app-xray/compile V=s 2>&1 | head -c 100000 | tee -a build.log
        
        # 方法3: 尝试编译所有相关包
        echo "=== Approach 3: Build all related packages ==="
        make package/xray/compile V=s 2>&1 | head -c 50000 | tee -a build.log
        make package/luci-app-xray/compile V=s 2>&1 | head -c 100000 | tee -a build.log

    - name: Comprehensive search for build artifacts
      run: |
        echo "=== Comprehensive search for build artifacts ==="
        
        # 搜索所有可能的IPK文件
        echo "IPK files found:"
        find . -name "*.ipk" -type f | head -20 || echo "No IPK files found"
        
        # 搜索构建目录
        echo "Build directories:"
        find . -name "build_dir" -type d | head -5
        
        # 搜索编译结果
        echo "Compilation results:"
        find . -name "*.o" -o -name "*.a" -o -name "*.so" | head -10
        
        # 检查标准输出目录
        echo "Standard output directories:"
        ls -la bin/packages/ || echo "No bin/packages directory"
        find bin/ -name "*" -type f | head -10 || echo "No files in bin directory"

    - name: Create detailed summary
      run: |
        echo "=== Build Summary ===" > summary.log
        echo "Date: $(date)" >> summary.log
        echo "" >> summary.log
        
        # 检查编译状态
        if grep -q "Compilation completed successfully" build.log; then
          echo "STATUS: Compilation reported success" >> summary.log
        else
          echo "STATUS: Compilation may have failed" >> summary.log
        fi
        
        # 检查IPK文件
        echo "" >> summary.log
        echo "=== IPK Files ===" >> summary.log
        find . -name "*.ipk" -type f | head -10 >> summary.log || echo "No IPK files found" >> summary.log
        
        # 检查错误
        echo "" >> summary.log
        echo "=== Errors ===" >> summary.log
        grep -i "error\|fail" build.log | tail -20 >> summary.log || echo "No errors found" >> summary.log
        
        # 检查警告
        echo "" >> summary.log
        echo "=== Warnings ===" >> summary.log
        grep -i "warning" build.log | grep -v "which does not exist" | tail -20 >> summary.log || echo "No significant warnings found" >> summary.log
        
        # 显示摘要
        cat summary.log

    - name: Upload detailed results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-details
        path: |
          summary.log
          build.log
        retention-days: 7

    - name: Upload any found artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/*.ipk
        retention-days: 7
