name: Build luci-app-xray for GL-MT6000 (Filogic)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

env:
  # 使用您提供的正确 ImmortalWrt SDK 地址
  SDK_URL: https://downloads.immortalwrt.org/snapshots/targets/mediatek/filogic/immortalwrt-sdk-mediatek-filogic_gcc-14.3.0_musl.Linux-x86_64.tar.zst
  FEEDS_CONF: |
    src-git packages https://git.openwrt.org/feed/packages.git
    src-git luci https://git.openwrt.org/project/luci.git
    src-git routing https://git.openwrt.org/feed/routing.git
    src-git telephony https://git.openwrt.org/feed/telephony.git

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout this repository
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zstd build-essential libncurses5-dev libncursesw5-dev \
        zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3

    - name: Set up terminal environment
      run: |
        # 设置虚拟终端环境变量，解决 "Error opening terminal: unknown" 问题
        echo "TERM=xterm" >> $GITHUB_ENV
        echo "export TERM=xterm" >> ~/.bashrc

    - name: Download and extract ImmortalWrt SDK
      run: |
        wget ${{ env.SDK_URL }} -O immortalwrt-sdk.tar.zst
        tar -I zstd -xf immortalwrt-sdk.tar.zst --strip-components=1
        rm immortalwrt-sdk.tar.zst

    - name: Setup feeds configuration
      run: echo "${{ env.FEEDS_CONF }}" > feeds.conf

    - name: Update and install feeds
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Clone luci-app-xray source
      run: |
        rm -rf package/luci-app-xray
        git clone https://github.com/yichya/luci-app-xray.git package/luci-app-xray

    - name: Prepare the build environment
      run: |
        # 设置终端类型，避免菜单配置错误
        export TERM=xterm
        
        # 创建必要的目录结构
        mkdir -p bin/packages/aarch64_cortex-a53/base
        mkdir -p bin/packages/aarch64_cortex-a53/luci
        mkdir -p bin/packages/aarch64_cortex-a53/packages
        
        # 创建简单的包索引文件
        echo "## This file is automatically generated by the build system" > bin/packages/aarch64_cortex-a53/Packages
        echo "## It is not intended to be used directly" >> bin/packages/aarch64_cortex-a53/Packages

    - name: Compile luci-app-xray package
      run: |
        # 设置终端类型
        export TERM=xterm
        
        # 直接编译指定包，跳过菜单配置
        make package/luci-app-xray/compile -j$(nproc) V=sc 2>&1 | tee build.log || \
        (echo "First attempt failed, trying alternative approach..." && \
         make tools/install toolchain/install && \
         make package/luci-app-xray/compile -j1 V=s 2>&1 | tee -a build.log)

    - name: Find and list built packages
      run: |
        echo "Searching for built packages..."
        find . -name "*.ipk" -type f | head -20
        find bin/ -name "*.ipk" -type f 2>/dev/null | head -20 || echo "No IPK files found in bin/"
        find . -name "*xray*" -o -name "*luci-app-xray*" | head -20

    - name: Upload any found IPK files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-ipks
        path: |
          **/*.ipk
        retention-days: 7

    - name: Upload build log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: build.log
        retention-days: 7

    - name: Upload full build directory (if needed for debugging)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-directory
        path: .
        retention-days: 1
